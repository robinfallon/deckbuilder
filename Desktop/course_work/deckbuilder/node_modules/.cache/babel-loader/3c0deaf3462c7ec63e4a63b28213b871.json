{"ast":null,"code":"var _jsxFileName = \"/Users/robinfallon/Desktop/course_work/deckbuilder/src/components/SearchResults.js\";\nimport React from 'react';\nimport Card from './Card';\n\nconst SearchResults = ({\n  results\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"Here's what we found (\", results.length, \" results):\"), // new\n  results.map(result => /*#__PURE__*/React.createElement(Card, Object.assign({\n    key: result.id\n  }, result, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default SearchResults;\n/* \n\n{ ...result }. This is the spread operator, and it takes each \nkey/value pair from the result, and adds it as a prop/value pair to the Card component...\n\n* This way we quickly add a lot of props to the Card, and \ncan then read them off inside the Card component definition.\n\n*/","map":{"version":3,"sources":["/Users/robinfallon/Desktop/course_work/deckbuilder/src/components/SearchResults.js"],"names":["React","Card","SearchResults","results","length","map","result","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACrC,sBACE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA4BA,OAAO,CAACC,MAApC,eADF,EAEI;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAYC,MAAM,iBAChB,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAGA,MAAM,CAACC;AAAnB,KAA6BD,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAHJ,CADF;AAUD,CAXD;;AAaA,eAAeJ,aAAf;AAEA","sourcesContent":["import React from 'react';\n\nimport Card from './Card';\n\nconst SearchResults = ({ results }) => {\n  return (\n    <div id=\"results\">\n      <h3>Here's what we found ({ results.length } results):</h3>\n      { // new\n        results.map(result => (\n          <Card key={ result.id } { ...result } />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default SearchResults;\n\n/* \n\n{ ...result }. This is the spread operator, and it takes each \nkey/value pair from the result, and adds it as a prop/value pair to the Card component...\n\n* This way we quickly add a lot of props to the Card, and \ncan then read them off inside the Card component definition.\n\n*/"]},"metadata":{},"sourceType":"module"}