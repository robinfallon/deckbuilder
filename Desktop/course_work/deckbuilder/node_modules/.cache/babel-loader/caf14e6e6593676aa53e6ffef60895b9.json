{"ast":null,"code":"var _jsxFileName = \"/Users/robinfallon/Desktop/course_work/deckbuilder/src/index.js\";\n// App component\n//import React from 'react';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { DeckList, SearchBar, SearchResults } from './components';\nexport default function ({\n  id\n}) {\n  const [count, setCount] = useState(0);\n}\n\nconst App = () => {\n  const [results, setResults] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  const addCardToDeck = ({\n    id,\n    name\n  }) => {\n    const nextDeck = [...deck]; // make a duplicate first\n\n    const index = nextDeck.findIndex(card => card.id === id); // index will be -1 if it is not found\n\n    if (index > -1) {\n      nextDeck[index].count += 1;\n    } else {\n      nextDeck.push({\n        id,\n        name,\n        count: 1\n      });\n    }\n\n    setDeck(nextDeck);\n  };\n\n  const removeCardFromDeck = ({\n    id\n  }) => {\n    const nextDeck = [...deck];\n    const index = nextDeck.findIndex(card => card.id === id);\n\n    if (index === -1) {\n      // don't do anything if we're trying to remove a card not in the deck\n      return;\n    }\n\n    if (nextDeck[index].count === 1) {\n      // remove the card altogether\n      nextDeck.splice(index, 1);\n    } else {\n      // decrement the count\n      nextDeck[index].count -= 1;\n    }\n\n    setDeck(nextDeck);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    setResults: setResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SearchResults, {\n    results: results,\n    addCardToDeck: addCardToDeck,\n    removeCardFromDeck: removeCardFromDeck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DeckList, {\n    deck: deck,\n    addCardToDeck: addCardToDeck,\n    removeCardFromDeck: removeCardFromDeck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/robinfallon/Desktop/course_work/deckbuilder/src/index.js"],"names":["React","useState","ReactDOM","DeckList","SearchBar","SearchResults","id","count","setCount","App","results","setResults","deck","setDeck","addCardToDeck","name","nextDeck","index","findIndex","card","push","removeCardFromDeck","splice","render","document","getElementById"],"mappings":";AAAA;AAEA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,aAAP;AAEA,SACEC,QADF,EAEEC,SAFF,EAGEC,aAHF,QAIO,cAJP;AAMA,eAAe,UAAS;AAAEC,EAAAA;AAAF,CAAT,EAAiB;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACD;;AAGD,MAAMQ,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMa,aAAa,GAAG,CAAC;AAAER,IAAAA,EAAF;AAAMS,IAAAA;AAAN,GAAD,KAAkB;AACtC,UAAMC,QAAQ,GAAG,CAAC,GAAGJ,IAAJ,CAAjB,CADsC,CACV;;AAC5B,UAAMK,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACb,EAAL,KAAYA,EAAvC,CAAd,CAFsC,CAItC;;AACA,QAAIW,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBV,KAAhB,IAAyB,CAAzB;AACD,KAFD,MAEO;AACLS,MAAAA,QAAQ,CAACI,IAAT,CAAc;AACZd,QAAAA,EADY;AAEZS,QAAAA,IAFY;AAGZR,QAAAA,KAAK,EAAE;AAHK,OAAd;AAKD;;AAEDM,IAAAA,OAAO,CAACG,QAAD,CAAP;AACD,GAhBD;;AAkBA,QAAMK,kBAAkB,GAAG,CAAC;AAAEf,IAAAA;AAAF,GAAD,KAAY;AACrC,UAAMU,QAAQ,GAAG,CAAC,GAAGJ,IAAJ,CAAjB;AACA,UAAMK,KAAK,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACb,EAAL,KAAYA,EAAvC,CAAd;;AAEA,QAAIW,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA;AACD;;AAED,QAAID,QAAQ,CAACC,KAAD,CAAR,CAAgBV,KAAhB,KAA0B,CAA9B,EAAiC;AAC/B;AACAS,MAAAA,QAAQ,CAACM,MAAT,CAAgBL,KAAhB,EAAuB,CAAvB;AACD,KAHD,MAGO;AACL;AACAD,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBV,KAAhB,IAAyB,CAAzB;AACD;;AAEDM,IAAAA,OAAO,CAACG,QAAD,CAAP;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,UAAU,EAAGL,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAGD,OADZ;AAEE,IAAA,aAAa,EAAGI,aAFlB;AAGE,IAAA,kBAAkB,EAAGO,kBAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAME,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAGT,IAAjB;AACE,IAAA,aAAa,EAAGE,aADlB;AAEE,IAAA,kBAAkB,EAAGO,kBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAYD,CAtDD;;AAwDAnB,QAAQ,CAACqB,MAAT,eACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["// App component\n\n//import React from 'react';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport {\n  DeckList,\n  SearchBar,\n  SearchResults\n} from './components';\n\nexport default function({ id }) {\n  const [count, setCount] = useState(0);\n}\n\n\nconst App = () => {\n  const [results, setResults] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  const addCardToDeck = ({ id, name }) => {\n    const nextDeck = [...deck]; // make a duplicate first\n    const index = nextDeck.findIndex(card => card.id === id);\n  \n    // index will be -1 if it is not found\n    if (index > -1) {\n      nextDeck[index].count += 1;\n    } else {\n      nextDeck.push({\n        id,\n        name,\n        count: 1\n      });\n    }\n  \n    setDeck(nextDeck);\n  }\n\n  const removeCardFromDeck = ({ id }) => {\n    const nextDeck = [...deck];\n    const index = nextDeck.findIndex(card => card.id === id);\n  \n    if (index === -1) {\n      // don't do anything if we're trying to remove a card not in the deck\n      return;\n    }\n  \n    if (nextDeck[index].count === 1) {\n      // remove the card altogether\n      nextDeck.splice(index, 1);\n    } else {\n      // decrement the count\n      nextDeck[index].count -= 1;\n    }\n  \n    setDeck(nextDeck);\n  }\n\n  return (\n    <div id=\"app\">\n      <SearchBar setResults={ setResults } />\n      <SearchResults \n        results={ results }\n        addCardToDeck={ addCardToDeck }\n        removeCardFromDeck={ removeCardFromDeck } />\n      <DeckList deck={ deck }         \n        addCardToDeck={ addCardToDeck }\n        removeCardFromDeck={ removeCardFromDeck }/>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}